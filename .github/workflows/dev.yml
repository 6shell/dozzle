on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
name: Push container
jobs:
  buildx:
    name: Push branches and PRs
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork && !github.event.pull_request.head.repo.fork && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == 'amir20/dozzle') }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Login to DockerHub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Log in to the Container registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v5
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            amir20/dozzle
            ghcr.io/amir20/dozzle
      - name: Writing certs to file
        run: |
          echo "${{ secrets.TTL_KEY }}" > shared_key.pem
          echo "${{ secrets.TTL_CERT }}" > shared_cert.pem
      - name: Build and push
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8
          tags: ${{ steps.meta.outputs.tags }}
          build-args: TAG=${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Create temporary containers for binary extraction
        run: |
          # Create containers for each platform without running them
          docker create --platform linux/amd64 --name dozzle-amd64 ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          docker create --platform linux/arm64 --name dozzle-arm64 ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
      - name: Extract binaries from containers
        run: |
          # Create directories for binaries
          mkdir -p binaries/amd64 binaries/arm64

          # Extract binaries from containers
          docker cp dozzle-amd64:/dozzle binaries/amd64/dozzle
          docker cp dozzle-arm64:/dozzle binaries/arm64/dozzle

          # Clean up containers
          docker rm dozzle-amd64 dozzle-arm64
      - name: Archive binaries
        uses: actions/upload-artifact@v4
        with:
          name: dozzle-binaries-${{ steps.meta.outputs.version }}
          path: binaries/
